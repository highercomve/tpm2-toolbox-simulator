FROM alpine

WORKDIR /pki

COPY strongswan-tpm.packages.tar.gz strongswan-tpm.packages.tar.gz
COPY asac-5d72164a.rsa.pub /etc/apk/keys/

RUN tar xvf strongswan-tpm.packages.tar.gz && \
	echo "/pki/packages/main" >> /etc/apk/repositories && \
	echo "/pki/packages/testing" >> /etc/apk/repositories && \
	echo "/pki/packages/community" >> /etc/apk/repositories

RUN apk update \
	&& apk add git \
		build-base \
		strongswan \
		libtool \
		binutils \
		grep \
		findutils \
		coreutils \
		bash \
		cmocka-dev \
		procps-dev \
		procps \
		iproute2 \
		bash \
		pkgconf \
		automake \
		openssl-dev \
		uthash-dev \
		autoconf \
		doxygen \
		libltdl \
		linux-headers \
		curl-dev \
		autoconf-archive \
    openssl \
    glib-dev \
    dbus-x11 \
	&& rm -rf /var/cache/apk/*
 
RUN adduser -S tss

# Install simulator
ARG ibmtpm_name=ibmtpm1332
ADD "https://downloads.sourceforge.net/project/ibmswtpm2/$ibmtpm_name.tar.gz" .
RUN sha1sum $ibmtpm_name.tar.gz | grep ^8fe74d8a155fba38e50d029251cd4eaf0c6e199d && \
  mkdir -p $ibmtpm_name && \
  tar xvf $ibmtpm_name.tar.gz -C $ibmtpm_name && \
  cd $ibmtpm_name/src && \
  make -j$(nproc) && \
  cp tpm_server /usr/local/bin

# install TSS itself
RUN git clone https://github.com/tpm2-software/tpm2-tss.git /tmp/tpm2-tss && \
	cd /tmp/tpm2-tss && \
  ./bootstrap && \
	./configure --prefix=/usr && \
	make -j$(nproc) check && \
	make install && \
	ldconfig /usr/lib /usr/glibc/usr/lib

# Install abrmd itself
ENV LD_LIBRARY_PATH /usr/lib
RUN git clone https://github.com/tpm2-software/tpm2-abrmd.git /tmp/tpm2-abrmd && \
  cd /tmp/tpm2-abrmd && \
  ./bootstrap && \
  ./configure --prefix=/usr --with-dbuspolicydir=/usr/share/dbus-1/system.d && \
  dbus-launch make -j$(nproc) check && \
  make install && \
	ldconfig /usr/lib /usr/glibc/usr/lib

# Install tools itself

RUN git clone https://github.com/tpm2-software/tpm2-tools.git /tmp/tpm2-tools
COPY tpm_tools.patch /tmp/tpm2-tools/tpm_tools.patch
RUN	cd /tmp/tpm2-tools && \
	patch -p1 < ./tpm_tools.patch && \
	./bootstrap && \
	./configure --prefix=/usr && \
	make -j$(nproc) check && \
	make install

COPY docker-entrypoint.alpine.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod 755 /usr/local/bin/docker-entrypoint.sh

WORKDIR /tpm2

ENTRYPOINT ["docker-entrypoint.sh"]
